package com.nashlincoln.blink.model;

import java.util.List;
import com.nashlincoln.blink.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.ArrayList;
// KEEP INCLUDES END
/**
 * Entity mapped to table BLINK_GROUP.
 */
public class Group {
    private String name;
    private Integer state;
    private Long id;
    private String attributableType;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GroupDao myDao;

    private List<GroupDevice> groupDeviceList;
    private List<Attribute> attributes;

    // KEEP FIELDS - put your custom fields here
    public static final String KEY = "Group";
    public static final String ATTRIBUTABLE_TYPE = "Group";
    public static final int STATE_NOMINAL = 0;
    public static final int STATE_ADDED = 1;
    public static final int STATE_REMOVED = 2;
    public static final int STATE_UPDATED = 3;
    // KEEP FIELDS END

    public Group() {
    }

    public Group(Long id) {
        this.id = id;
    }

    public Group(String name, Integer state, Long id, String attributableType) {
        this.name = name;
        this.state = state;
        this.id = id;
        this.attributableType = attributableType;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGroupDao() : null;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getAttributableType() {
        return attributableType;
    }

    public void setAttributableType(String attributableType) {
        this.attributableType = attributableType;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GroupDevice> getGroupDeviceList() {
        if (groupDeviceList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupDeviceDao targetDao = daoSession.getGroupDeviceDao();
            List<GroupDevice> groupDeviceListNew = targetDao._queryGroup_GroupDeviceList(id);
            synchronized (this) {
                if(groupDeviceList == null) {
                    groupDeviceList = groupDeviceListNew;
                }
            }
        }
        return groupDeviceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGroupDeviceList() {
        groupDeviceList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Attribute> getAttributes() {
        if (attributes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AttributeDao targetDao = daoSession.getAttributeDao();
            List<Attribute> attributesNew = targetDao._queryGroup_Attributes(id, attributableType);
            synchronized (this) {
                if(attributes == null) {
                    attributes = attributesNew;
                }
            }
        }
        return attributes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAttributes() {
        attributes = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public List<Device> getDevices() {
        List<Device> devices = new ArrayList<>();
        for (GroupDevice groupDevice : getGroupDeviceList()) {
            devices.add(groupDevice.getDevice());
        }
        return devices;
    }


    public void setNominal() {
        state = STATE_NOMINAL;
        for (Attribute attribute : getAttributes()) {
            attribute.onSync();
        }
        update();
    }

    public void setLevel(int level) {
        Attribute attribute = getAttributes().get(1);
        if (attribute.getInt() != level) {
            attribute.setValueLocal(level);
            state = STATE_UPDATED;
        }
        update();
    }

    public void setOn(boolean on) {
        Attribute attribute = getAttributes().get(0);
        if (on != attribute.getBool()) {
            attribute.setValueLocal(on);
            state = STATE_UPDATED;
        }
        update();
    }

    public boolean isOn() {
        return getAttributes().get(0).getBool();
    }

    public int getLevel() {
        return getAttributes().get(1).getInt();
    }
    // KEEP METHODS END

}
